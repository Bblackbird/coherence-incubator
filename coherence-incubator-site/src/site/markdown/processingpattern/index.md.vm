The Processing Pattern
----------------------

<h4>Overview</h4>

Provides a mechanism to perform distributed grid computing with Coherence.  It
is an extensible grid-based processing engine, capable of accepting, dispatching 
and executing a variety of workloads, the types of which may be customized by developers.

Unlike the traditional hub-and-spoke / master-worker / broker-agent, the Processing Pattern 
avoids the classic "single-point-of-failure", "single-point-of-dispatch", "single-point-of-contention" 
problems by managing and distributing the core state of across Coherence.

<h4>Distribution</h4>

The Oracle Coherence Incubator Processing Pattern is distributed as a single jar 
called: `coherence-processingpattern-${project.version}.jar`

<h4>Introduction</h4>

The Processing Pattern has four key concepts; *Processing Sessions*, *Submissions*,
*Submission Outcomes* and *Dispatchers*.

*   `ProcessingSessions`, also commonly called `Sessions`, provide the ability to
    submit "work" for an implementation to process *asynchronously*.  Additionally
    `ProcessingSessions` provide mechanisms to "disconnect" and later "reconnect"
    to previously submitted "work", thus naturally permitting long running "work"
    to be processed and monitored.

*   `Submissions` encapsulate the information representing the "work" to process.
    Typically these are simply regular serialized objects.  There's no contract
    on how "work" is represented or interfaces to implement.

*   Upon submitting "work", a `ProcessingSession` will return a `SubmissionOutcome`,
    that of which may be used to track and manage the processing of the said "work".

*   Once submitted, one or more configured `Dispatchers` are consulted to route
    the `Submissions` for appropriate processing. How processing actually occurs 
    is dependent on the type of `Dispatcher` and possibly the `Submission`.

Out-of-the-box three dispatcher implementations are provided:

1.  A `LoggingDispatcher` that simply logs `Submissions` that have been submitted.

2.  A `LocalDispatcher` that can execute Java `Runnables` and `Callables`.

3.  A `TaskDispatcher` that can dispatch and execute `Tasks`, a more sophisticated
    form of `Callable`.

While `LocalDispatchers` are very useful for processing standard Java asynchronous
processes, in most cases `TaskDispatchers` are the preferred type of dispatcher to
use when adopting the Processing Pattern.

The `TaskDispatcher` implementation leverages the following concepts:

1.  A `Task` is a `Submission` that implements the 'Task' interface.   It is used
    to provide information concerning a task, including properties for routing.
    A specialized form of `Task`, called a `ResumableTask` is provided to permit
    check-pointing (saving) of intermediate state, thus allowing said tasks to be
    suspended and resumed as needed.

2.  A `TaskProcessor` is an entity that actually executes `Tasks`.

    Out-of-the-box two types of `TaskProcessor` are provided.   The first called
    a *Grid* processor that of which is instantiated on all storage-enabled cluster
    nodes.  The second called a *Single* processor, that of which is instantiated
    on a single storage-enabled cluster node with in a cluster.

3.  A `TaskDispatchPolicy` governs how `Tasks` are allocated to `TaskProcessors`.

    Out-of-the-box three `TaskDispatchPolicies` are provided, including *Round Robin*,
    *Random* and *Attribute Matching*.

The following section outlines the process by which `ProcessingSessions` may be
used to submit and manage `Submissions`.

<h5>Submitting Work</h5>

Submitting work is main activity of a `ProcessingSession`.  While there are several
overloaded variants of the `ProcessingSession.submit` method, the result of submitting
work is always a `SubmissionOutcome` instance, that of which you use to determine
and retrieve the current `SubmissionState`, together with current processing result(s).

As the Processing Pattern requires that all `Submissions` be uniquely identifiable
(simply so that said `Submissions` may be tracked, managed and results of which may
retrieved at some point in the future) submitting work requires a decision to be
made concerning an appropriate `Identifier` to use.  In general there are two
approaches to identifying work:

1.  Explicitly specify and `Identifier` for each `Submission` or

2.  Request that the `ProcessingSession` automatically generate one for you
    (based on a UUID).

Regardless of the approach used, the `Identifier` for a `Submission` can always
be retrieved by calling `SubmissionOutcome.getIdentifier()` method.

>   [Coherence Common](../common/index.html) defines a number of `Identifier`
>   implementations, including those for `String`, `Integer`, `Long` and `UUID`
>   types, aptly named `StringBasedIdentifier`, `IntegerBasedIdentifier`,
>   `LongBasedIdentifier` and `UUIDBasedIdentifier`.


*Auto Generated Submission Identifiers:*

    //submit the work (without an identifier specified it will create one)
    SubmissionOutcome outcome = processingSession.submit(work, configuration);

    //get the identifier created for the submission
    Identifier id = outcome.getIdentifier();

*Explicitly specified Submission Identifiers:*

    //create an identifier for the submission
    Identifier id = new StringBasedIdentifier("my-work");

    //submit the work
    SubmissionOutcome outcome = processingSession.submit(id, work, configuration);

    //get the identifier specified for the submission
    Identifier idSubmission = outcome.getIdentifier();

    //it will be the same as the one we specified when we submitted the work
    assert id.equals(idSubmission);

<h5>Submission Garbage Collection</h5>

Once a `Submission` has been submitted it is scheduled for *acceptance* (and
later processing) using an appropriate `Dispatcher` (more on this shortly).  Once
accepted by a `Dispatcher` a `SubmissionOutcome` is created and returned to the
submitter, that of which may request the status of any processing and/or retrieve
results from processing.

After a `Submission` has been processed (either successfully or through to failure),
its internal representation together with its associated `SubmissionOutcome`
must be removed from the system to prevent excessive use of memory.  The approach
used to control when and how this *clean up* occurs is defined by the configured
`SubmissionRetentionPolicy`.

When the `SubmissionRetentionPolicy` is set to `RemoveOnFinalState`, all internal
state related to a `Submission` is automatically removed when processing has finished
(either due to completion or failure).   That is, clients are not required to
clean-up submissions once they are executed.  This is the default behavior.

When the `SubmissionRetentionPolicy` is set to `ExplicitRemove`, all internal
state related to a `Submission` is held by the system until a corresponding call
to `ProcessingSession.discardSubmission(Identifier)` is made.   That is, clients
must make every effort to clean-up the submissions explicitly themselves.

<h5>Releasing and Acquiring Submission Outcomes</h5>

When a client `ProcessingSession` would like to have another client `ProcessingSession`
take over ownership of a `Submission`, the first client must "release" the said
`SubmissionOutcome` using the `ProcessingSession.releaseSubmission(SubmissionOutcome)`
method, after which the second client can later "acquire" ownership by calling
the `ProcessingSession.acquireSubmission(...)` method.

*Releasing a Submission:*

    Identifier id = outcome.getIdentifier();
    processingSession.releaseSubmission(outcome);

*Acquiring a Submission:*

    //acquiring a submission
    SubmissionOutcome outcome = processingSession.acquireSubmission(id, ...);

>   `Identifiers` used for representing Submissions are always serializable.
>   Hence it's both legal and appropriate to serialize, store and transmit said
>   `Identifiers` between applications and servers.

<h5>Cancelling a Submission</h5>

To cancel a submission you simply call the `ProcessingSession.cancelSubmission(...)`
method using the `Identifier` of the submission to cancel.

    //get the submission identifier to cancel
    Identifier id = outcome.getIdentifer();

    //cancel the submission
    processingSession.cancelSubmission(id);

Calling `cancelSubmission` will mark the `Submission` as being *CANCELLED* (if it
is not already in a final state).  When this occurs, the `SubmissionOutcome` will
notified and any blocking calls (like `SubmissionOutcome.get()`) will return.

If the `Submission` has started processing, e.g. if a Runnable has started running,
the executing thread will be interrupted.  If a Runnable has called `wait`, `sleep`
or `join` on the current thread, an `InterruptedException` will be thrown.

A `Runnable` / `Callable` / `Task` can check whether the `Submission` has been
cancelled by calling `Thread.currentThread().interrupted()` after which it may
subsequently abort processing/perform potential rollback/compensatory actions.

Here is an example of submitting and cancelling a Submission:

    ProcessingSession session = new DefaultProcessingSession(StringBasedIdentifier.newInstance("SessionIdentifier"));
    SubmissionOutcome outcome = session.submit(new DoNothingRunnable(15000),
                                               new DefaultSubmissionConfiguration(null),
                                               StringBasedIdentifier.newInstance("submissionId"),
                                               SubmissionRetentionPolicy.ExplicitRemove,
                                               null);

    System.out.println("Wait a second before CANCELLING submission");
    Thread.currentThread().sleep(1000);

    session.cancelSubmission(outcome.getIdentifier());
    outcome.get(); //Waits for a final state for the Submission.
